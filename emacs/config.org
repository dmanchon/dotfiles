* Compile file
#+BEGIN_SRC emacs-lisp
;(defun dmanchon/compile-config ()
;  (interactive)
;  (org-babel-load-file "~/.emacs.d/config.org")
;  (byte-recompile-directory "~/.emacs.d/" "." 0)
;)

(setq gc-cons-threshold 50000000)

#+END_SRC

#+RESULTS:
: 100000000

* Package managment
#+BEGIN_SRC emacs-lisp
;; Bootstrap use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Default is to have elpa provide the package
(setq use-package-always-ensure t)
(setq use-package-verbose t)
;; If running as daemon, just load shite
(if (daemonp)
  (setq use-package-always-demand t))

(use-package better-defaults :defer t :ensure t)
#+END_SRC

#+RESULTS:

* Paths
#+BEGIN_SRC emacs-lisp
(setq exec-path-from-shell-arguments '("-l"))
(use-package exec-path-from-shell :ensure t :defer t)
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))


(setq shell-file-name "/bin/zsh")
(use-package multi-term :defer t :ensure t)
(setq multi-term-program "/bin/zsh")

;; store all backup and autosave files in the tmp dir
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

#+RESULTS:
| .* | /var/folders/sp/my_8jlzs395g1txr9s0c0m800000gn/T/ | t |

* PGP and authorization
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Daniel Manchon"
      user-mail-address "dmanchon@gmail.com")

;; Use only authinfo.gpg for password storage
(use-package auth-password-store
  :ensure t
  :defer t
  :init
  (auth-pass-enable))
;; Make sure it's the only mechanism
(setq auth-sources '(password-store))
(setq auth-source-gpg-encrypt-to (list user-mail-address))
(setq epg-gpg-program "gpg2")
(setenv "GPG_AGENT_INFO" nil)
(setenv "LC_ALL" "en_US.UTF-8")
#+END_SRC

#+RESULTS:
: en_US.UTF-8

* Theme and fonts
#+BEGIN_SRC emacs-lisp
(when (window-system)
  (tool-bar-mode -1)
  (scroll-bar-mode -1))
(menu-bar-mode t)

(set-face-attribute 'default nil
		    :family "Source Code Pro"
		    :height 150
		    :weight 'normal
		    :width 'normal)


(use-package moe-theme :demand t)
(moe-light)
;(load-theme 'leuven)


(defun no-trailing-whitespace ()
  (setq show-trailing-whitespace nil))

(add-hook 'minibuffer-setup-hook
	  'no-trailing-whitespace)
(add-hook 'eww-mode-hook
	  'no-trailing-whitespace)
(add-hook 'ielm-mode-hook
	  'no-trailing-whitespace)
(add-hook 'gdb-mode-hook
	  'no-trailing-whitespace)
(add-hook 'help-mode-hook
	  'no-trailing-whitespace)
#+END_SRC


#+RESULTS:
| no-trailing-whitespace |

* Org mode
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil ;; don't prompt for confirmation about executing a block
      org-src-tab-acts-natively t
      org-use-sub-superscripts '{}
      org-src-fontify-natively t)
(use-package htmlize :defer t :ensure t)
(use-package ox-twbs :defer t :ensure t)
#+END_SRC

#+RESULTS:
: t

* Latex
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
	 ("\\.md\\'" . markdown-mode)
	 ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc"))
#+END_SRC

#+RESULTS:

* JS/HTML/CSS/Typescript
#+BEGIN_SRC emacs-lisp
(use-package groovy-mode :defer t :ensure t)
(add-to-list 'auto-mode-alist '("\\Jenkinsfile\\'" . groovy-mode))


(use-package company :defer t :ensure t)
(use-package typescript-mode :defer t :ensure t)

(use-package tide :defer t :ensure t)
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  ;(setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
;(add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)
#+END_SRC

#+RESULTS:
| setup-tide-mode |

* Org babel mode
#+BEGIN_SRC emacs-lisp
  (require 'ob-python)
  (require 'ob-sh)
  (require 'ob-emacs-lisp)
#+END_SRC
#+RESULTS:
: ob-emacs-lisp

* Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ace-window :ensure t :defer t
      :bind* (("M-p" . ace-window)))

  (use-package ivy :ensure t :defer t
    :diminish ivy-mode
    :init (setq projectile-completion-system 'ivy)
    :bind
    (:map ivy-mode-map ("C-'" . ivy-avy))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-height 10)
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-virtual-abbreviate 'full) ; Show the full virtual file paths
    (setq ivy-extra-directories '("./")) ; default value: ("../" "./")
    (setq ivy-wrap t)
    (setq ivy-re-builders-alist '((swiper . ivy--regex-plus)
				  (counsel-ag . ivy--regex-plus)
				  (counsel-grep-or-swiper . ivy--regex-plus)
				  (t . ivy--regex-plus))))

  (use-package counsel-projectile :ensure t :defer t
    :bind* (("C-c p p" . counsel-projectile-switch-project))
    :init
    (counsel-projectile-on))

  (use-package counsel :ensure t :defer t
    :bind*
    (("M-x" . counsel-M-x)
     ("C-s" . swiper)
     ("C-c d d" . counsel-descbinds)
     ("C-c s s" . counsel-ag)
     ("C-c s d" . counsel-ag-projectile)
     ("C-x C-f" . counsel-find-file)
     ("C-x r" . counsel-recentf)
     ("C-c g g" . counsel-git)
     ("C-c g G" . counsel-git-grep)
     ("C-x l" . counsel-locate)
     ("C-c g s" . counsel-grep-or-swiper)
     ("M-y" . counsel-yank-pop)
     ("C-c C-r" . ivy-resume)
     ("C-c i m" . counsel-imenu)
     ("C-c i M" . ivy-imenu-anywhere)
     ("C-c d s" . describe-symbol)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line-and-call))

    :config
    (defun reloading (cmd)
      (lambda (x)
	(funcall cmd x)
	(ivy--reset-state ivy-last)))
    (defun given-file (cmd prompt) ; needs lexical-binding
      (lambda (source)
	(let ((target
	       (let ((enable-recursive-minibuffers t))
		 (read-file-name
		  (format "%s %s to:" prompt source)))))
	  (funcall cmd source target 1))))
    (defun confirm-delete-file (x)
      (dired-delete-file x 'confirm-each-subdirectory))

    (ivy-add-actions
     'counsel-find-file
     `(("c" ,(given-file #'copy-file "Copy") "copy")
       ("d" ,(reloading #'confirm-delete-file) "delete")
       ("m" ,(reloading (given-file #'rename-file "Move")) "move")))
    (ivy-add-actions
     'counsel-projectile-find-file
     `(("c" ,(given-file #'copy-file "Copy") "copy")
       ("d" ,(reloading #'confirm-delete-file) "delete")
       ("m" ,(reloading (given-file #'rename-file "Move")) "move")
       ("b" counsel-find-file-cd-bookmark-action "cd bookmark")))

    ;; to make counsel-ag search the root projectile directory.
    (defun counsel-ag-projectile ()
      (interactive)
      (counsel-ag nil (projectile-project-root)))

    (setq counsel-find-file-at-point t)
    ;; ignore . files or temporary files
    (setq counsel-find-file-ignore-regexp
	  (concat
	   ;; File names beginning with # or .
	   "\\(?:q
      \\`[#.]\\)"
	   ;; File names ending with # or ~
	   "\\|\\(?:\\`.+?[#~]\\'\\)")))

					  ;(setq ivy-display-style 'fancy)

  (use-package ivy-hydra :defer t :ensure t)
  (define-key ivy-minibuffer-map (kbd "<left>") 'counsel-up-directory)
  (define-key ivy-minibuffer-map (kbd "<right>") 'ivy-alt-done)

#+END_SRC

#+RESULTS:
: ivy-alt-done

* Git
#+BEGIN_SRC emacs-lisp
(use-package magit :ensure t :defer t)
(setq magit-refresh-status-buffer nil)
(global-set-key [f2] 'magit-status)
#+END_SRC

#+RESULTS:
: magit-status

* Clojure

#+BEGIN_SRC emacs-lisp
(require 'ob-clojure)
(use-package slime :ensure t :defer t)
(setq org-babel-clojure-backend 'cider)
(use-package cider :ensure t :defer t)
(use-package clojure-mode :ensure t :defer t)
(use-package paredit :ensure t :defer t)
(use-package rainbow-delimiters :ensure t :defer t)

(add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
(add-hook 'clojure-mode-hook 'paredit-mode)
(add-hook 'emacs-lisp-mode-hook 'paredit-mode)
#+END_SRC

#+RESULTS:
| paredit-mode |

* Python
#+BEGIN_SRC emacs-lisp
  (use-package multi-line :defer t :ensure t)
  (use-package elpy :defer t :ensure t)
  (pyvenv-mode)
  (use-package realgud :defer t)

  (defun ssbb-pyenv-hook ()
    "Automatically activates pyenv version if .python-version file exists."
    (f-traverse-upwards
     (lambda (path)
       (let ((pyenv-version-path (f-expand ".python-version" path)))
	 (if (f-exists? pyenv-version-path)
	     (pyvenv-mode (s-trim (f-read-text pyenv-version-path 'utf-8))))))))

  (add-hook 'find-file-hook 'ssbb-pyenv-hook)
  (add-to-list 'exec-path "~/.pyenv/shims")

  (elpy-enable)

  (setq elpy-rpc-backend "jedi")
  (setq python-check-command (expand-file-name "~/.pyenv/shims/flake8"))
  (setq python-check-command "flake8")

  ; cleanup whitespace on save.  This is run as a before-save-hook
  ; because it would throw flake8 errors on after-save-hook
  (add-hook 'before-save-hook 'whitespace-cleanup)

  (defun elpy-goto-definition-or-rgrep ()
    "Go to the definition of the symbol at point, if found. Otherwise, run `elpy-rgrep-symbol'."
    (interactive)
    (ring-insert find-tag-marker-ring (point-marker))
    (condition-case nil (elpy-goto-definition)
      (error (elpy-rgrep-symbol
	      (concat "\\(def\\|class\\)\s" (thing-at-point 'symbol) "(")))))

  (define-key elpy-mode-map [f5] 'elpy-goto-definition-or-rgrep)

#+END_SRC

#+RESULTS:
: elpy-goto-definition-or-rgrep

* Project
#+BEGIN_SRC emacs-lisp
  (global-company-mode)
  (global-set-key (kbd "TAB") #'company-indent-or-complete-common)
  (use-package projectile :ensure t :defer t)
  (projectile-mode)
  (setq projectile-switch-project-action 'projectile-dired)

  (use-package docker-tramp :defer t :ensure t)
  (use-package yaml-mode :defer t :ensure t)

#+END_SRC

#+RESULTS:
: yaml-mode

* Navigation
#+BEGIN_SRC emacs-lisp

  (use-package dashboard
    :config
    (dashboard-setup-startup-hook))
  (setq dashboard-items '((recents  . 10)
			   (bookmarks . 5)
			   (projects . 5)
			   (agenda . 5)))
  (use-package expand-region
    :defer t :ensure t)
  (global-set-key (kbd "C-.") 'er/expand-region)
  (global-set-key (kbd "C->") 'er/contract-region)

  (when (string= system-type "darwin")
    (setq dired-use-ls-dired nil))

  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))

  (use-package undo-tree :defer t :ensure t)
  (require 'undo-tree)
  (global-undo-tree-mode)

  (use-package neotree :defer t :ensure t)
  (require 'neotree)
  (global-set-key [f3] 'neotree-toggle)
  (global-set-key [f4] 'eshell)

  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 100)

  (add-hook 'prog-mode-hook (lambda ()
			      (linum-mode t)
			      (electric-pair-mode)))
  (show-paren-mode)       ; Automatically highlight parenthesis pairs
  (setq show-paren-delay 0) ; show the paren match immediately

  (global-hl-line-mode)

  (custom-set-faces
    '(hl-line ((t (:background "LightGoldenrod2")))))

  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq confirm-kill-emacs 'y-or-n-p)

  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)

  (setq org-src-fontify-natively t)

  (use-package guide-key
    :ensure t
    :config
    (setq guide-key/guide-key-sequence '("C-c" "C-x"))
    (setq guide-key/recursive-key-sequence-flag t)
    (setq guide-key/idle-delay 1)
    (setq guide-key/popup-window-position 'bottom)
    (guide-key-mode 1))

  (use-package docker
    :defer t
    :diminish
    )
  (use-package dockerfile-mode
    :defer t
    )
#+END_SRC

#+RESULTS:
: t

* Nix
#+BEGIN_SRC emacs-lisp
(use-package nix-mode
   :defer t :ensure t)
#+END_SRC

#+RESULTS:
: t

* Services
#+BEGIN_SRC emacs-lisp
(use-package prodigy :defer t :ensure t)
#+END_SRC
#+RESULTS:
