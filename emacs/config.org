* Compile file
#+BEGIN_SRC emacs-lisp :results value silent
(setq gc-cons-threshold 50000000)
#+END_SRC

* Package managment
#+BEGIN_SRC emacs-lisp :results value silent
;; Bootstrap use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Default is to have elpa provide the package
(setq use-package-always-ensure t)
(setq use-package-verbose t)
;; If running as daemon, just load shite
(if (daemonp)
  (setq use-package-always-demand t))

(use-package better-defaults :defer t :ensure t)
#+END_SRC

* Paths
#+BEGIN_SRC emacs-lisp :results value silent
  (setq home-folder "/Users/dmanchon")
  (use-package f :ensure t)
  (setq exec-path-from-shell-arguments '("-l"))
  (use-package exec-path-from-shell :ensure t :defer t)
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))

  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-env "GOPATH"))

  (setenv "GOPATH" (concat home-folder "/golang"))
  (add-to-list 'exec-path (concat home-folder "/golang/bin"))
  (setq shell-file-name "/bin/zsh")
  (use-package multi-term :defer t :ensure t)
  (setq multi-term-program "/bin/zsh")

  ;; store all backup and autosave files in the tmp dir
  (setq temporary-file-directory (concat default-directory "temp"))
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+END_SRC

* PGP and authorization
#+BEGIN_SRC emacs-lisp :results value silent
  (setq user-full-name "Daniel Manchon"
        user-mail-address "dmanchon@gmail.com")

  ;; Use only authinfo.gpg for password storage
  (use-package helm-pass)
  (setq auth-sources '(password-store))
  (setq auth-source-gpg-encrypt-to (list user-mail-address))
  (setq epg-gpg-program "gpg")
  (setenv "GPG_AGENT_INFO" nil)
  (setenv "LC_ALL" "en_US.UTF-8")
#+END_SRC

* Theme and fonts
#+BEGIN_SRC emacs-lisp :results value silent
  (when (window-system)
       (tool-bar-mode -1)
       (scroll-bar-mode -1))
     (menu-bar-mode t)

     (set-face-attribute 'default nil
                         :family "IBM Plex Mono"
                         :height 190
                         :slant 'normal
                         :weight 'semi-light
                         :width 'condensed)


     (use-package moe-theme :demand t)
     (moe-light)

     (defun no-trailing-whitespace ()
       (setq show-trailing-whitespace nil))

     (add-hook 'minibuffer-setup-hook
               'no-trailing-whitespace)
     (add-hook 'eww-mode-hook
               'no-trailing-whitespace)
     (add-hook 'ielm-mode-hook
               'no-trailing-whitespace)
     (add-hook 'gdb-mode-hook
               'no-trailing-whitespace)
     (add-hook 'help-mode-hook
               'no-trailing-whitespace)
#+END_SRC

* Org mode
We need to define were the base folder for all the org files is:
#+BEGIN_SRC emacs-lisp :results value silent
  (require 'ox-beamer)
  (use-package ox-reveal :ensure t :defer t)
  (setq org-directory (expand-file-name (concat default-directory "org")))
  (setq org-agenda-files
     `(,(concat org-directory "/gtd.org") ,(concat org-directory "/archive.org")))

  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)

  (global-set-key (kbd "C-c o")
                  (lambda () (interactive) (find-file (concat org-directory "/gtd.org"))))

  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 3))))

  (setq org-capture-templates
        `(("t"     ;hotkey
           "Todo"  ;name
           entry   ;type
           (file+headline ,(concat org-directory "/gtd.org") "Tasks")
           "* TODO %?\n  %i\n  %a") ;template
          ("s"
           "Code Snippet"
           entry
           (file+headline ,(concat org-directory "/gtd.org") "Code Snippets")
           (file ,(concat org-directory "/snippet.template")))
          ("l"
           "For later consideration"
           entry
           (file+headline ,(concat org-directory "/gtd.org") "To be refiled")
           "* TODO %^{Title} %^G\n  DEADLINE: %^t\n  %?")
          ("j"
           "Journal entry"
           entry
           (file+olp+datetree ,(concat org-directory "/journal.org.gpg"))
           "*** %^{Title}\n    %?" :clock-in t :clock-resume t)))


  (setq org-confirm-babel-evaluate nil ;; don't prompt for confirmation about executing a block
        org-src-tab-acts-natively t
        org-use-sub-superscripts '{}
        org-src-fontify-natively t)
  (use-package htmlize :defer t :ensure t)
  (use-package ox-twbs :defer t :ensure t)
#+END_SRC

* Org babel mode
#+BEGIN_SRC emacs-lisp :results value silent
  (require 'ob-python)
  (require 'ob-shell)
  (require 'ob-emacs-lisp)
#+END_SRC

* Latex
#+BEGIN_SRC emacs-lisp :results value silent
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc"))
#+END_SRC

* Project
#+BEGIN_SRC emacs-lisp :results value silent
  (use-package company :defer t :ensure t)
  (use-package multi-line :defer t :ensure t)
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1))

  (use-package ag)
  (use-package helm-ag :defer t :ensure t)
  (use-package helm-projectile :defer t :ensure t
    :config
    (helm-projectile-on))

  (setq-default indent-tabs-mode nil)
  (global-company-mode)
  (global-set-key (kbd "TAB") #'company-indent-or-complete-common)
  (use-package docker-tramp :defer t :ensure t)
  (use-package yaml-mode :defer t :ensure t)

#+END_SRC

* JS/HTML/CSS/Typescript
#+BEGIN_SRC emacs-lisp :results value silent
(use-package typescript-mode :defer t :ensure t)
(use-package tide :defer t :ensure t)
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
(add-hook 'before-save-hook 'tide-format-before-save)
(add-hook 'typescript-mode-hook #'setup-tide-mode)
#+END_SRC

* Clojure

#+BEGIN_SRC emacs-lisp :results value silent
  (require 'ob-clojure)
  (use-package slime :ensure t :defer t)
  (setq org-babel-clojure-backend 'cider)
  (use-package cider :ensure t :defer t)
  (use-package clojure-mode :ensure t :defer t)
  (use-package paredit :ensure t :defer t)
  (use-package rainbow-delimiters :ensure t :defer t)

  (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'clojure-mode-hook 'paredit-mode)
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
  (setq cider-cljs-lein-repl
        "(do (require 'figwheel-sidecar.repl-api)
             (figwheel-sidecar.repl-api/start-figwheel!)
             (figwheel-sidecar.repl-api/cljs-repl))")

  (condition-case err
      (load (expand-file-name "~/quicklisp/slime-helper.el"))
    (error (princ (format "The error was: %s" err))))

  ;; Replace "sbcl" with the path to your implementation
  (setq inferior-lisp-program "sbcl")


#+END_SRC

* Python
Choose between elpy or anaconda-mode
#+BEGIN_SRC emacs-lisp :results value silent
  (use-package pyvenv)
  (pyvenv-mode)
  (use-package f)
  (defun ssbb-pyenv-hook ()
    "Automatically activates pyenv version if .python-version file exists."
       (f-traverse-upwards
        (lambda (path)
          (let ((pyenv-version-path (f-expand ".python-version" path)))
            (if (f-exists? pyenv-version-path)
                (pyvenv-mode (s-trim (f-read-text pyenv-version-path 'utf-8))))))))

  (add-hook 'find-file-hook 'ssbb-pyenv-hook)
  (add-to-list 'exec-path "~/.pyenv/shims")
  (setq python-check-command (expand-file-name "~/.pyenv/shims/flake8"))
  (setq python-check-command "flake8")
  (use-package realgud :defer t)

  ;; cleanup whitespace on save.  This is run as a before-save-hook
  ;; because it would throw flake8 errors on after-save-hook
  (add-hook 'before-save-hook 'whitespace-cleanup)

  ;; elpy
  (defun dmanchon/elpy-config ()
    (use-package elpy :defer t :ensure t)
    (elpy-enable)
    (setq elpy-rpc-backend "jedi"))

  ;; anaconda
  (defun dmanchon/anaconda-config ()
    (use-package anaconda-mode :defer t :ensure t)
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
    (use-package company-anaconda :defer t :ensure t)
    (eval-after-load "company"
      '(add-to-list 'company-backends 'company-anaconda)))

     ;;(dmanchon/anaconda-config)
  (add-hook 'python-mode-hook 'flycheck-mode)
  (dmanchon/elpy-config)
    (use-package lsp-ui)
  (setq lsp-ui-sideline-enable nil)
  (use-package lsp-python)
  (add-hook 'lsp-mode-hook 'lsp-ui-mode)
  (add-hook 'python-mode-hook #'lsp-python-enable)

#+END_SRC

* Golang
#+BEGIN_SRC emacs-lisp :results value silent
  (use-package go-projectile :defer t :ensure t)
  (use-package company-go :defer t :ensure t)
  (use-package go-mode :defer t :ensure t)

  (add-hook 'go-mode-hook 'flycheck-mode)
  (use-package lsp-go :defer t :ensure t)
  (require 'lsp-go)
  (add-hook 'go-mode-hook #'lsp-go-enable)
  ;;(add-hook 'completion-at-point-functions 'go-complete-at-point)

#+END_SRC

* Other programming languages
#+BEGIN_SRC emacs-lisp :results value silent
  (use-package groovy-mode :defer t :ensure t)
  (add-to-list 'auto-mode-alist '("\\Jenkinsfile\\'" . groovy-mode))
  (autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
  (add-to-list 'auto-mode-alist '("\\.pl\\'" . prolog-mode))

#+END_SRC

* Git
#+BEGIN_SRC emacs-lisp :results value silent
(use-package magit :ensure t :defer t)
(setq magit-refresh-status-buffer nil)
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key [f2] 'magit-status)
#+END_SRC

* Ivy
#+BEGIN_SRC emacs-lisp :results value silent
    (use-package ace-window :ensure t :defer t
        :bind* (("C-x o" . ace-window)))

    (use-package ivy :ensure t :defer t
      :diminish ivy-mode
      :init (setq projectile-completion-system 'ivy)
      :bind
      (:map ivy-mode-map ("C-'" . ivy-avy))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-height 10)
      (setq ivy-initial-inputs-alist nil)
      (setq ivy-count-format "%d/%d ")
      (setq ivy-virtual-abbreviate 'full) ; Show the full virtual file paths
      (setq ivy-extra-directories '("./")) ; default value: ("../" "./")
      (setq ivy-wrap t)
      (setq ivy-re-builders-alist '((swiper . ivy--regex-plus)
                                    (counsel-ag . ivy--regex-plus)
                                    (counsel-grep-or-swiper . ivy--regex-plus)
                                    (t . ivy--regex-plus))))

    (use-package counsel :ensure t :defer t
      :bind*
      (("M-x" . counsel-M-x)
       ("C-s" . swiper)
       ("C-c d d" . counsel-descbinds)
       ("C-c s a" . counsel-osx-app)
       ("C-c p a" . helm-projectile-ag)
       ("C-x C-f" . counsel-find-file)
       ("C-x r" . counsel-recentf)
       ("C-c g g" . counsel-git)
       ("C-c g G" . counsel-git-grep)
       ("C-x l" . counsel-locate)
       ("C-c g s" . counsel-grep-or-swiper)
       ("M-y" . counsel-yank-pop)
       ("C-c C-r" . ivy-resume)
       ("C-c i m" . counsel-imenu)
       ("C-c d s" . describe-symbol)
       :map ivy-minibuffer-map
       ("M-y" . ivy-next-line-and-call))
      :config
      (define-key ivy-minibuffer-map (kbd "<left>") 'counsel-up-directory)
      (define-key ivy-minibuffer-map (kbd "<right>") 'ivy-alt-done)
      (defun reloading (cmd)
        (lambda (x)
          (funcall cmd x)
          (ivy--reset-state ivy-last)))
      (defun given-file (cmd prompt) ; needs lexical-binding
        (lambda (source)
          (let ((target
                 (let ((enable-recursive-minibuffers t))
                   (read-file-name
                    (format "%s %s to:" prompt source)))))
            (funcall cmd source target 1))))
      (defun confirm-delete-file (x)
        (dired-delete-file x 'confirm-each-subdirectory))

      (ivy-add-actions
       'counsel-find-file
       `(("c" ,(given-file #'copy-file "Copy") "copy")
         ("d" ,(reloading #'confirm-delete-file) "delete")
         ("m" ,(reloading (given-file #'rename-file "Move")) "move")))
      (ivy-add-actions
       'helm-projectile-find-file
       `(("c" ,(given-file #'copy-file "Copy") "copy")
         ("d" ,(reloading #'confirm-delete-file) "delete")
         ("m" ,(reloading (given-file #'rename-file "Move")) "move")
         ("b" counsel-find-file-cd-bookmark-action "cd bookmark")))

      (setq counsel-find-file-at-point t)
      ;; ignore . files or temporary files
      (setq counsel-find-file-ignore-regexp
            (concat
             ;; File names beginning with # or .
             "\\(?:q
        \\`[#.]\\)"
             ;; File names ending with # or ~
             "\\|\\(?:\\`.+?[#~]\\'\\)")))

    (setq ivy-display-style 'fancy)
    (use-package ivy-hydra :defer t :ensure t)
    (use-package counsel-osx-app :defer t :ensure t)
#+END_SRC

* Navigation
#+BEGIN_SRC emacs-lisp :results value silent
  (use-package expand-region
    :defer t :ensure t)
  (global-set-key (kbd "C-.") 'er/expand-region)
  (global-set-key (kbd "C->") 'er/contract-region)

  (when (string= system-type "darwin")
    (setq dired-use-ls-dired nil))

  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))

  (use-package undo-tree :defer t :ensure t)
  (require 'undo-tree)
  (global-undo-tree-mode)

  (use-package neotree :defer t :ensure t)
  (require 'neotree)
  (global-set-key [f3] 'neotree-toggle)
  (global-set-key [f4] 'eshell)

  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 100)

  (add-hook 'prog-mode-hook (lambda ()
                              (linum-mode t)
                              (electric-pair-mode)))
  (show-paren-mode)       ; Automatically highlight parenthesis pairs
  (setq show-paren-delay 0) ; show the paren match immediately


  (use-package hl-line
   :config (set-face-background 'hl-line "LightGoldenrod2"))
  (global-hl-line-mode)

  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq confirm-kill-emacs 'y-or-n-p)

  (use-package diff-hl
   :init (global-diff-hl-mode)
   :config (add-hook 'vc-checkin-hook 'diff-hl-update))

  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)

  (setq org-src-fontify-natively t)

  (use-package guide-key
    :ensure t
    :config
    (setq guide-key/guide-key-sequence '("C-c" "C-x"))
    (setq guide-key/recursive-key-sequence-flag t)
    (setq guide-key/idle-delay 1)
    (setq guide-key/popup-window-position 'bottom)
    (guide-key-mode 1))

  (use-package docker
    :defer t
    :diminish
    )
  (use-package dockerfile-mode
    :defer t
    )
#+END_SRC

* Nix
#+BEGIN_SRC emacs-lisp :results value silent
(use-package nix-mode
   :defer t :ensure t)
#+END_SRC

* Services
#+BEGIN_SRC emacs-lisp :results value silent
(use-package prodigy :defer t :ensure t)
#+END_SRC
